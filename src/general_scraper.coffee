

###


Generic code for data scraping. 
Page_Helper has in page functions.


The code is split into following sections
	1.	Specific Variable declaration section
	2.	Generic Require scripts for page helper
	3.	Generic Log debug module
	4.	Generic data gathering functions
	5.	Specific process page
	6.	Specific url functions

Specific functions varies across sites and generic functions can be reused

###




# Generated by CoffeeScript 1.8.0
debugger
currentLink = 0
links = []
data = []
nextLink = null
url = ''


###
------------------------------------------------------------------------------------------------------------------------
###


nextLink = null
casper = require('casper').create(
  clientScripts: [ 'includes/jquery-1.7.2.js' ]
  verbose: true
  logLevel: 'info')

fs = require('fs')
pageHelper = require('./page_helper.coffee').get()
# casper.on 'remote.message', (message) ->
#   @log message, 'info'
casper.logDebug = (msg)->
    casper.log msg,'info'
		
###
Data extraction with in page should be defined here
###

_peval = (scrpt) ->
    try
        return eval(scrpt)
    catch _error
        e = _error
        return console.log(e)


_papi = (scrpt) ->
	try
		return eval($.ajax(
			type: 'POST'
			url: 'http://maps.googleapis.com/maps/api/geocode/json?address="'+scrpt+'"&sensor=false'
			async: false
			))
	catch _error
		e = _error
		return console.log(e)

casper.jsonFilter = (apijson, param, index) ->
	if (apijson.status != "ZERO_RESULTS")
		matches = apijson.results[index].address_components.filter((val, index, array) ->
			val.types[0] == param
			)
		jsonFilterValue = matches[0]?.long_name ? ""
	else 
		jsonFilterValue = ""
	jsonFilterValue


casper.getDataFromApi = (pageData) ->
	apiparam = pageData.split('","')[1]
	apiparam = apiparam.replace(/\'/g,"")
	apidata = @evaluate _papi,encodeURIComponent(apiparam)
	apijson = JSON.parse(apidata.responseText)
	
	if apijson.results.length > 1
		index = 1
	else
		index = 0

	CivicNumber = @jsonFilter(apijson,'street_number',index)
	StreetName = @jsonFilter(apijson,'route',index)
	CityName = @jsonFilter(apijson,'administrative_area_level_2',index)
	Province = @jsonFilter(apijson,'administrative_area_level_1',index)
	PostalCode = @jsonFilter(apijson,'postal_code',index)
	(CivicNumber + '","' + StreetName + '","' + CityName + '","' + Province + '","' + PostalCode + '","')
	



casper.captureLinks = ->
	hrefs = @evaluate pageHelper._pgetLinks,LinksSelector
	links.push.apply(links,hrefs)
	@echo 'No of links.....:' + links.length
  
casper.getDataFromPage = (self,url)->
    casper.then ->
        casper.logDebug 'opening the link:'+url
        casper.open url
    casper.then ->
        pageData = @evaluate _pprocessPage
        data.push '\r\n' + pageData
        casper.logDebug 'collected data from '+(currentLink+data.length)+' links/'+links.length
        casper.clear()
    casper.then ->
        if data.length is 500
            casper.exportData()

casper.getDataFromLinks = ->
    if casper.cli.get(1) < 10
    	data.push pageHelper.header
	    if fs.exists(fileName)
	    	fs.remove(fileName)	    	
    links = links.slice(casper.cli.get(1),casper.cli.get(2))    
    casper.each links,@getDataFromPage
    casper.then ->
        casper.exportData()
        
casper.exportData = ->
    if data.length > 0
        casper.then ->
            fs.write fileName, data.join(''), 'a'
        casper.then ->
            #filePart += 1
            currentLink += data.length
            data = []

casper.exportCode = ->	
	if links.length > 0
		fs.write linksFileName, links, 'w'
	count = 0
	dataloop = []
	while links.length > (count+100)
		dataloop += "casperjs " + baseFileName + " data " + (count) + " " + (count+100) + "\n"
		count = count + 100
	dataloop += "casperjs " + baseFileName + " data " + (count) + " " + (links.length) + "\n"
	fs.write batchFileName, dataloop, 'w'        

casper.preparePage = ->	
	href = nextLink
	@log 'the href is '+href,'info'
	if href.length>6
		@echo 'href Exists is true'
		casper.then ->
			href = decodeURIComponent(href) 
			href = href.split(':')[1]
			@evaluate _peval,href 
		casper.then casper.captureLinks	
		casper.then -> 			
			nextLink = @evaluate pageHelper._pgetNextLink, NextLinkSelector
			casper.log nextLink,'debug'
		if nextLink?
			casper.then casper.preparePage
		else 
			return
	else 
		return




###
------------------------------------------------------------------------------------------------------------------------
###


NextLinkSelector = '#pager > a.next'
LinksSelector = 'td a'
fileName = 'output/new2.csv'
linksFileName = 'output/links.csv'
batchFileName = 'output/new2.bat'
baseFileName = 'general_scraper.coffee'


_pprocessPage = ->
	NA = ''
	NANUM = 0
	objValue = '"' + jQuery('.page-heading h1').text().trim() + '","'
	Address = jQuery('.page-heading h1').text()
	objValue += (if Address != undefined then Address.trim().replace(/\s+/g, ' ') else NA) + '","'
	Category = jQuery('.breadcrumb li:last').text()
	objValue += (if Category != undefined then Category else NA) + '","'
	Address = jQuery('.page-heading h1').text().split('Canada')[0]
	PostalCode = jQuery('.page-heading h1').text().split('Canada')[1]
	Address = if Address != undefined then Address else NA
	addLen = Address.split(',').length
	Province = if addLen - 2 != -1 then Address.split(',')[addLen - 2] else NA
	CityName = if addLen - 3 != -1 then Address.split(',')[addLen - 3] else NA
	StreetName = if addLen - 4 != -1 then Address.split(',')[addLen - 4] else NA
	CivicNumber = if addLen - 5 != -1 then Address.split(',')[addLen - 5] else NA

	objValue += (if CivicNumber != undefined then CivicNumber else NA) + '","'
	objValue += (if StreetName != undefined then StreetName.trim() else NA) + '","'
	objValue += (if CityName != undefined then CityName.trim() else NA) + '","'
	objValue += (if Province != undefined then Province.trim() else NA) + '","'
	objValue += (if PostalCode != undefined then PostalCode.trim() else NA) + '","'
	RentOrSale = jQuery('.call-to-action h4:first').text().split(',')[1]
	objValue += (if RentOrSale != undefined then RentOrSale.trim() else NA) + '","'


	YearBuilt = jQuery('tr th:contains("Year Built") + td').text()
	objValue += (if YearBuilt != undefined then YearBuilt.trim() else NA) + '","'
	TotalLandArea = jQuery('tr th:contains("Total Land Area") + td').text()
	objValue += (if TotalLandArea != undefined then TotalLandArea.replace(/\D/g, '') else NANUM) + '","'
	BuildingArea = jQuery('tr th:contains("Total Building Area") + td').text()
	objValue += (if BuildingArea != undefined then BuildingArea.replace(/\D/g, '') else NANUM) + '","'
	WareHouseArea = jQuery('tr th:contains("Warehouse Area") + td').text()
	objValue += (if WareHouseArea != undefined then WareHouseArea.replace(/\D/g, '') else NANUM) + '","'
	objValue += NANUM + '","'
	objValue += NANUM + '","'
	SalePrice = jQuery('tr th:contains("Sale Price") + td').text().trim()
	objValue += (if SalePrice != undefined then SalePrice.split('.')[0].replace(/\D/g, '') else NANUM) + '","'
	objValue += jQuery('tr th:contains("Base Rent") + td').text().trim().replace(/\$/g, '') + '","'
	objValue += jQuery('tr th:contains("Additional Rent") + td').text().trim().replace(/\$/g, '') + '","'
	objValue += 'bmpcanada' + '","'
	ClearHeight = jQuery('tr th:contains("Clear Height") + td').text()
	objValue += (if ClearHeight != undefined or ClearHeight != '' then ClearHeight.trim() else NANUM) + '","'
	ContactName = $('.call-to-action .row h4').map(->
	  $(this).text()
	).get().join()
	objValue += (if ContactName != undefined then ContactName.trim() else NA) + '","'
	TruckLevelDoors = jQuery('tr th:contains("Truck Level Doors") + td').text()
	objValue += (if TruckLevelDoors != undefined or TruckLevelDoors != '' then TruckLevelDoors.trim() else NANUM) + '","'
	DriveInDoors = jQuery('tr th:contains("DriveIn Doors") + td').text()
	objValue += (if DriveInDoors != undefined or DriveInDoors != '' then DriveInDoors.trim() else NANUM) + '","'
	ContactNo = $('.call-to-action .row p:first').text()
	ContactNo = if ContactNo != undefined then ContactNo.split('\n')[1].trim().replace(/\D/g, '').substring(0, 10) else NA
	objValue += (if ContactNo != undefined then ContactNo else NA) + '","'
	ImageUrl = $('.fotorama img')[0].src
	objValue += (if ImageUrl != undefined then ImageUrl else NA) + '","'
	objValue += jQuery('tr th:contains("Parking") + td').text() + '","'
	objValue += jQuery('tr th:contains("Zoning") + td').text().substring(0, 150) + '","'
	objValue += jQuery('tr th:contains("Occupancy") + td').text() + '","'
	objValue += window.location.href + '","'
	Description = jQuery('.cta-txt p').text()
	objValue += (if Description != undefined then Description.replace(/\s+/g, ' ').replace(/\"/g, '""').trim() else NA) + '"'
	objValue


###
page Automation starts here
URL function. All the main URLs to be iterated comes here
###

phantom.clearCookies()
if (casper.cli.get(0) == 'links')
	casper.start url
	casper.then casper.captureLinks
	casper.then casper.exportCode

if (casper.cli.get(0) == 'data')
	casper.start()
	casper.then ->		
		content = fs.read(linksFileName)
		for line in content.toString().split ','
			links.push(line)
		casper.then casper.getDataFromLinks #Scrape linksdata

casper.run ->
	  @echo 'done'
	  @exit()
	
###
------------------------------------------------------------------------------------------------------------------
###